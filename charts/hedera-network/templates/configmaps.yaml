apiVersion: v1
kind: ConfigMap
metadata:
 name: account-balance-uploader-config
data:
  DEBUG: "{{ $.Values.mirror.debug }}"
  REAPER_ENABLE: "{{ $.Values.mirror.reaper.enable }}"
  REAPER_MIN_KEEP: "{{ $.Values.mirror.reaper.minKeep }}"
  REAPER_INTERVAL: "{{ $.Values.mirror.reaper.interval }}"
  REAPER_DEFAULT_BACKOFF: "{{ $.Values.mirror.reaper.defaultBackoff }}"
  STREAM_FILE_EXTENSION: "pb"
  STREAM_SIG_EXTENSION: "pb_sig"
  STREAM_EXTENSION: "pb.gz"
  S3_ENABLE: "{{ $.Values.mirror.s3.enable }}"
  GCS_ENABLE: "{{ $.Values.mirror.gcs.enable }}"
  SIG_REQUIRE: "{{ $.Values.mirror.sig.require }}"
  SIG_PRIORITIZE: "{{ $.Values.mirror.sig.prioritize }}"
  SIG_EXTENSION: "pb_sig.gz"
  BUCKET_PATH: "{{ $.Values.mirror.accountBalance.bucketPath }}"
  BUCKET_NAME: "{{ $.Values.mirror.accountBalance.bucketName }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: event-stream-uploader-config
data:
  DEBUG: "{{ $.Values.mirror.debug }}"
  REAPER_ENABLE: "{{ $.Values.mirror.reaper.enable }}"
  REAPER_MIN_KEEP: "{{ $.Values.mirror.reaper.minKeep }}"
  REAPER_INTERVAL: "{{ $.Values.mirror.reaper.interval }}"
  REAPER_DEFAULT_BACKOFF: "{{ $.Values.mirror.reaper.defaultBackoff }}"
  STREAM_FILE_EXTENSION: "evts"
  STREAM_SIG_EXTENSION: "evts_sig"
  STREAM_EXTENSION: "evts"
  S3_ENABLE: "{{ $.Values.mirror.s3.enable }}"
  GCS_ENABLE: "{{ $.Values.mirror.gcs.enable }}"
  SIG_REQUIRE: "{{ $.Values.mirror.sig.require }}"
  SIG_PRIORITIZE: "{{ $.Values.mirror.sig.prioritize }}"
  SIG_EXTENSION: "evts_sig"
  BUCKET_PATH: "{{ $.Values.mirror.eventStream.bucketPath }}"
  BUCKET_NAME: "{{ $.Values.mirror.eventStream.bucketName }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: record-stream-uploader-config
data:
  DEBUG: "{{ $.Values.mirror.debug }}"
  REAPER_ENABLE: "{{ $.Values.mirror.reaper.enable }}"
  REAPER_MIN_KEEP: "{{ $.Values.mirror.reaper.minKeep }}"
  REAPER_INTERVAL: "{{ $.Values.mirror.reaper.interval }}"
  REAPER_DEFAULT_BACKOFF: "{{ $.Values.mirror.reaper.defaultBackoff }}"
  STREAM_FILE_EXTENSION: "rcd"
  STREAM_SIG_EXTENSION: "rcd_sig"
  STREAM_EXTENSION: {{ $.Values.mirror.recordStream.compression | ternary "rcd.gz" "rcd" }}
  RECORD_STREAM_COMPRESSION: "{{ $.Values.mirror.recordStream.compression }}"
  RECORD_STREAM_SIDECAR: "{{ $.Values.mirror.recordStream.sidecar }}"
  S3_ENABLE: "{{ $.Values.mirror.s3.enable }}"
  GCS_ENABLE: "{{ $.Values.mirror.gcs.enable }}"
  SIG_REQUIRE: "{{ $.Values.mirror.sig.require }}"
  SIG_PRIORITIZE: "{{ $.Values.mirror.sig.prioritize }}"
  SIG_EXTENSION: "rcd_sig"
  BUCKET_PATH: "{{ $.Values.mirror.recordStreamSideCar.bucketPath }}"
  BUCKET_NAME: "{{ $.Values.mirror.recordStreamSideCar.bucketName }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-config
data:
  BACKUP_UPLOADER_BUCKET_1: {{ .Values.sidecars.backup.bucket1 }}
  BACKUP_UPLOADER_BUCKET_2: {{ .Values.sidecars.backup.bucket2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
data:
  config.yaml:
  {{- .Files.Get "configs/otel-collector-config.yaml" | toYaml | nindent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
 name: ofac-config
data:
 ofacBlock.acl: |
  {{- .Files.Get "configs/ofacBlock.acl" | nindent 4  }}
---
# Configmaps for envoy and haproxy, one for each network node
{{- range $nodeConfig := ($.Values.hedera.nodes) }}
apiVersion: v1
kind: ConfigMap
metadata:
 name: haproxy-config-{{ $nodeConfig.name }}
data:
 haproxy.cfg: |
  {{- tpl ($.Files.Get "configs/haproxy.cfg") (dict "nodeConfig" $nodeConfig "Template" $.Template) | nindent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
 name: envoy-proxy-config-{{ $nodeConfig.name }}
data:
 haproxy.cfg: |
  {{- tpl ($.Files.Get "configs/envoy.yaml") (dict "nodeConfig" $nodeConfig "Template" $.Template) | nindent 4 }}
---
{{ end }}

