global
    log 127.0.0.1 local0 info
    maxconn 100000
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.1
    stats socket 0.0.0.0:14566
defaults
    log global
    maxconn 100000
    timeout connect 10s
    timeout client 30s
    timeout server 30s
frontend fe_proxy
    mode http
    option httplog
    option http-use-htx
    option logasap
    # Read the blacklist of OFAC Sanctioned Country IP List
    # Log & Reject the Traffic
    acl ofac_ip src -f /var/opt/ofacBlock.acl
    tcp-request connection reject if ofac_ip
    acl ofac_ip_xff hdr_ip(x-forwarded-for) -f /var/opt/ofacBlock.acl
    http-request deny if ofac_ip_xff
    bind *:50211 proto h2
    default_backend be_servers
frontend fe_proxy_tls
    mode tcp
    option tcplog
    # Read the blacklist of OFAC Sanctioned Country IP List
    # Log & Reject the Traffic
    acl ofac_ip src -f /var/opt/ofacBlock.acl
    tcp-request connection reject if ofac_ip
    bind *:50212
    default_backend be_servers_tls
backend be_servers
    mode http
    option http-use-htx
    # Health Checks: Poll the server with regular health checks every 10 seconds
    # Health Checks: Observe all Layer 4 TCP connections for problems.
    # Health Checks: 5 connections must fail before on-error parameter is invoked and marks server down.
    # Health Checks: Revive the server with regular health checks by polling the server every 10 seconds.
    server server1 network-{{ .nodeConfig.name }}-service:50211 proto h2 check inter 10s downinter 10s observe layer4 error-limit 5 on-error mark-down
backend be_servers_tls
    mode tcp
    option ssl-hello-chk
    # Health Checks: Poll the server with regular health checks every 10 seconds
    # Health Checks: Observe all Layer 4 TCP connections for problems.
    # Health Checks: 5 connections must fail before on-error parameter is invoked and marks server down.
    # Health Checks: Revive the server with regular health checks by polling the server every 10 seconds.
    server server1 network-{{ .nodeConfig.name }}-service:50212 check inter 10s downinter 10s observe layer4 error-limit 5 on-error mark-down
listen stats
    mode http
    bind 0.0.0.0:14567
    http-request use-service prometheus-exporter if { path /metrics }
    stats enable
    stats uri /stats
    stats refresh 10s
    stats auth {{ randAlpha 4 | trunc 4 }}:{{ randAlphaNum 10 | trunc 12 }}
