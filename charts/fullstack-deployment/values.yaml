global:
  namespaceOverride: ""
  ingressClassName: "hedera-explorer-ingress-class" # override for multiple deployments within the same cluster and make unique per cluster

# cloud configuration
cloud:
  buckets:
    streamBucket: "fst-streams"
    backupBucket: "fst-backups"
  minio:
    enabled: true
  acmeClusterIssuer:
    enabled: false
  selfSignedClusterIssuer:
    enabled: false
  haproxyIngressController:
    enabled: false

# telemetry configurations
telemetry:
  prometheus:
    svcMonitor:
      enabled: true

# reduce default termination grace period
terminationGracePeriodSeconds: 10

# helm test container
tester:
  deployPodMonitor: true
  clusterRoleName: "pod-monitor-role" # this is a shared cluster role for all namespaces
  image:
    registry: "ghcr.io"
    repository: "hashgraph/full-stack-testing/kubectl-bats"
    tag: "" # this should be empty since we want the default behavior of $.Chart.appVersion to apply
    pullPolicy: "IfNotPresent"
  resources: {}

# lets encrypt acme cluster issuer configuration
acme-cluster-issuer:
  issuers:
    staging:
      email: ""
      name: '{{ .Values.global.namespaceOverride | default .Release.Namespace | printf "%s-letsencrypt-staging" }}'
    production:
      email: ""
      name: '{{ .Values.global.namespaceOverride | default .Release.Namespace | printf "%s-letsencrypt-prod" }}'
  solvers: # TODO change in: https://github.com/hashgraph/full-stack-testing/issues/631
    http01:
      solverType: "ingress"

# default settings for a single node
# This default configurations can be overridden for each node in the hedera.nodes section.
defaults:
  volumeClaims:
    enabled: false
    node:
      accountBalances: "100Gi"
      eventStreams: "100Gi"
      recordStreams: "100Gi"
      dataOnboard: "1Gi"
      dataSaved: "500Gi"
      dataStats: "50Gi"
      dataUpgrade: "5Gi"
      output: "5Gi"
  root: # root container
    image:
      registry: "ghcr.io"
      repository: "hashgraph/full-stack-testing/ubi8-init-java17"
      tag: "" # this should be empty since we want the default behavior of $.Chart.appVersion to apply
      pullPolicy: "IfNotPresent"
    resources: {}
  haproxy:
    enabled: true
    nameOverride: "haproxy"
    image:
      registry: "docker.io"
      repository: "haproxytech/haproxy-alpine"
      tag: "2.4.25"
      pullPolicy: "IfNotPresent"
    resources: {}
    serviceType: "LoadBalancer"
  envoyProxy:
    enabled: true
    nameOverride: "envoy-proxy"
    image:
      registry: "docker.io"
      repository: "envoyproxy/envoy"
      tag: "v1.21.1"
      pullPolicy: "IfNotPresent"
    resources: {}
    loadBalancerEnabled: false
  sidecars:
    recordStreamUploader:
      enabled: true
      nameOverride: "record-stream-uploader"
      image:
        registry: "gcr.io"
        repository: "hedera-registry/uploader-mirror"
        tag: "1.3.0"
        pullPolicy: "IfNotPresent"
      config:
        debug: true
        compression: true
        sidecar: true
        reaper:
          enabled: true
          minKeep: 1
          interval: 1
          defaultBackoff: 1
        signature:
          require: true
          prioritize: true
      resources: {}
    eventStreamUploader:
      enabled: true
      nameOverride: "event-stream-uploader"
      image:
        registry: "gcr.io"
        repository: "hedera-registry/uploader-mirror"
        tag: "1.3.0"
        pullPolicy: "IfNotPresent"
      config:
        debug: true
        compression: true
        reaper:
          enabled: true
          minKeep: 1
          interval: 1
          defaultBackoff: 1
        signature:
          require: true
          prioritize: true
      resources: {}
    accountBalanceUploader:
      enabled: false
      nameOverride: "account-balance-uploader"
      image:
        registry: gcr.io
        repository: hedera-registry/uploader-mirror
        tag: "1.3.0"  # Defaults to the chart's app version if empty
        pullPolicy: "IfNotPresent"
      config:
        debug: true
        compression: true
        reaper:
          enabled: true
          minKeep: 1
          interval: 1
          defaultBackoff: 1
        signature:
          require: true
          prioritize: true
      resources: {}
    backupUploader:
      enabled: false
      nameOverride: "backup-uploader"
      image:
        registry: "gcr.io"
        repository: "hedera-registry/hedera-backups"
        tag: "0.6.0"
        pullPolicy: "IfNotPresent"
      config:
        backupBucket: "backup"
      resources: {}
    otelCollector:
      enabled: true
      nameOverride: ""
      image:
        registry: "docker.io"
        repository: "otel/opentelemetry-collector-contrib"
        tag: "0.72.0"
        pullPolicy: "IfNotPresent"
      resources: {}
      receivers:
        prometheus:
          scrapeTargets: [ 0.0.0.0:9999 ]  # hedera node metrics are exposed at port 9999
          scrapeInterval: 5s
      exporters:
        otlp:
          endpoint: tempo:4317
          tls:
            insecure: true
        prometheus:
          tls:
            insecure: true
        prometheusRemoteWrite:
          enabled: false
          endpoint: "" # e.g. http://prometheus.<NAMESPACE>.svc:9090/api/v1/write
          tls:
            insecure: true

# This configures the minio tenant subchart
# Reference for configuration: https://github.com/minio/operator/blob/master/helm/tenant/values.yaml
minio-server:
  secrets:
    # This secret has [accessKey, secretKey] and will be randomly generated by helm
    existingSecret: minio-secrets
  tenant:
    buckets:
      - name: fst-streams
      - name: fst-backups
    name: minio
    pools:
      - servers: 1
        name: pool-1
        volumesPerServer: 1
        size: 10Gi
        nodeSelector: {}
        labels:
          fullstack.hedera.com/testSuiteName: ""
          fullstack.hedera.com/testName: ""
          fullstack.hedera.com/testRunUID: ""
          fullstack.hedera.com/testCreationTimestamp: ""
          fullstack.hedera.com/testExpirationTimestamp: ""
          fullstack.hedera.com/testRequester: ""
        tolerations:
          - key: "fullstack-scheduling.io/os"
            operator: "Equal"
            value: "linux"
            effect: "NoSchedule"
          - key: "fullstack-scheduling.io/role"
            operator: "Equal"
            value: "network"
            effect: "NoSchedule"
    configuration:
      name: minio-secrets
    certificate:
      requestAutoCert: false
  environment:
    MINIO_BROWSER_LOGIN_ANIMATION: off # https://github.com/minio/console/issues/2539#issuecomment-1619211962

# hedera mirror node configuration
hedera-mirror-node:
  enabled: false # set to false during first deployment, then do an upgrade with it enabled and supply the base64 encoded addressbook
  labels:
    fullstack.hedera.com/testSuiteName: ""
    fullstack.hedera.com/testName: ""
    fullstack.hedera.com/testRunUID: ""
    fullstack.hedera.com/testCreationTimestamp: ""
    fullstack.hedera.com/testExpirationTimestamp: ""
    fullstack.hedera.com/testRequester: ""
  graphql: # not needed for default FST use case
    enabled: false
  rosetta: # not needed for default FST use case
    enabled: false
  redis:
    enabled: false # not needed for default FST use case
  global:
    namespaceOverride: "{{ tpl (.Values.global.namespaceOverride | toString) }}"

  # importer is a component of the hedera mirror node
  # config for subchart hedera-mirror/importer
  importer:
    nodeSelector: {}
    tolerations:
      - key: "fullstack-scheduling.io/os"
        operator: "Equal"
        value: "linux"
        effect: "NoSchedule"
      - key: "fullstack-scheduling.io/role"
        operator: "Equal"
        value: "network"
        effect: "NoSchedule"
    envFrom:
      - secretRef:
          name: mirror-passwords
      - secretRef:
          name: "{{ .Release.Name }}-redis"
      - secretRef:
          name: uploader-mirror-secrets
    # The addressbook.bin file updates will be handled by infrastructure code or solo
    addressBook: ""
    config:
      # importer is a springboot app, its application.yaml configuration starts here
      # This config is mounted at [/usr/etc/hedera/application.yaml] in the importer pod
      hedera:
        mirror:
          importer:
            network: other
            downloader:
              allowAnonymousAccess: false
              bucketName: "fst-streams"
              # for s3 configuration of mirror node look at uploader-mirror-secrets.yaml
            parser:
              record:
                entity:
                  notify:
                    enabled: true
                  redis:
                    enabled: false
      management:
        endpoint:
          health:
            group:
              readiness:
                exclude: redis
  grpc:
    nodeSelector: {}
    tolerations:
      - key: "fullstack-scheduling.io/os"
        operator: "Equal"
        value: "linux"
        effect: "NoSchedule"
      - key: "fullstack-scheduling.io/role"
        operator: "Equal"
        value: "network"
        effect: "NoSchedule"
    config:
      hedera:
        mirror:
          grpc:
            listener:
              type: NOTIFY
      management:
        endpoint:
          health:
            group:
              readiness:
                exclude: redis
  postgresql:
    postgresql:
      nodeSelector: {}
      tolerations:
        - key: "fullstack-scheduling.io/os"
          operator: "Equal"
          value: "linux"
          effect: "NoSchedule"
        - key: "fullstack-scheduling.io/role"
          operator: "Equal"
          value: "network"
          effect: "NoSchedule"
    pgpool:
      replicaCount: 0
  rest:
    nodeSelector: {}
    tolerations:
      - key: "fullstack-scheduling.io/os"
        operator: "Equal"
        value: "linux"
        effect: "NoSchedule"
      - key: "fullstack-scheduling.io/role"
        operator: "Equal"
        value: "network"
        effect: "NoSchedule"
    monitor:
      enabled: false
  web3:
    nodeSelector: {}
    tolerations:
      - key: "fullstack-scheduling.io/os"
        operator: "Equal"
        value: "linux"
        effect: "NoSchedule"
      - key: "fullstack-scheduling.io/role"
        operator: "Equal"
        value: "network"
        effect: "NoSchedule"

haproxy-ingress:
  controller:
    service:
      loadBalancerIP: "" # the external IP address of the hedera mirror node explorer

# hedera-mirror-node-explorer configuration
hedera-explorer:
  enabled: false # set to false during first deployment, then do an upgrade with it enabled and supply the base64 encoded addressbook
  # leave blank to use default, set if you have multiple deployments in a cluster to make it unique
  selfSignedCertClusterIssuer: '{{ .Values.global.namespaceOverride | default .Release.Namespace | printf "%s-self-signed-cluster-issuer" }}'
  certClusterIssuerType: "self-signed" # "acme-staging", "acme-prod", or "self-signed"
  ingress:
    enabled: false
    hosts:
      - host: "explorer.fst.local"
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: ca-secret-hedera-explorer
        hosts:
          - '{{ index .Values.ingress.hosts 0 "host" }}'
  labels:
    fullstack.hedera.com/testSuiteName: ""
    fullstack.hedera.com/testName: ""
    fullstack.hedera.com/testRunUID: ""
    fullstack.hedera.com/testCreationTimestamp: ""
    fullstack.hedera.com/testExpirationTimestamp: ""
    fullstack.hedera.com/testRequester: ""
  nodeSelector: {}
  tolerations:
    - key: "fullstack-scheduling.io/os"
      operator: "Equal"
      value: "linux"
      effect: "NoSchedule"
    - key: "fullstack-scheduling.io/role"
      operator: "Equal"
      value: "network"
      effect: "NoSchedule"
  global:
    namespaceOverride: "{{ .Values.global.namespaceOverride }}"
  # The hedera explorer UI /api url will proxy  all request to mirror node
  #
  # Without this we would need to expose the mirror node rest API publicly and specify its public url in the network config below
  proxyPass:
    /api: "http://{{ .Release.Name }}-rest"

  # In the json config below we are using the url as "/", instead of a regular http://mainnet.url
  # This makes the explorer UI make a relative request to its own url
  # This in combination with proxyPass above saves us the need to expose mirror node URL publicly
  config: |
    [
      {
        "name": "localnet",
        "displayName": "LOCALNET",
        "url": "/",
        "ledgerID": "03"
      }
    ]

# common deployment configuration
deployment:
  podAnnotations: {}
  podLabels: {}
  nodeSelector: {}
  tolerations:
    - key: "fullstack-scheduling.io/os"
      operator: "Equal"
      value: "linux"
      effect: "NoSchedule"
    - key: "fullstack-scheduling.io/role"
      operator: "Equal"
      value: "network"
      effect: "NoSchedule"
  # Specify pod affinity
  # Use complete affinity spec starting with key "nodeAffinity:"
  # Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  affinity: {}
  priorityClassName: {}
  ## PodDisruptionBudget for fullstack testing pods
  ## Default backend Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  ## @param deployment.podDisruptionBudget.create Enable Pod Disruption Budget configuration
  ## @param deployment.podDisruptionBudget.minAvailable Minimum number/percentage of pods that should remain scheduled
  ## @param deployment.podDisruptionBudget.maxUnavailable Maximum number/percentage of pods that should remain scheduled
  ##
  podDisruptionBudget:
    create: true
    minAvailable: 1
    maxUnavailable: ""
  testMetadata:
    enabled: false
    testSuiteName: ""
    testName: ""
    testRunUID: ""
    testCreationTimestamp: ""
    testExpirationTimestamp: ""
    testRequester: ""

# hedera node configuration
hedera:
  configMaps:
    apiPermissionsProperties: |
      # Crypto
      createAccount=0-*
      cryptoTransfer=0-*
      updateAccount=0-*
      cryptoGetBalance=0-*
      getAccountInfo=0-*
      cryptoDelete=0-*
      getAccountRecords=0-*
      getTxRecordByTxID=0-*
      getTransactionReceipts=0-*
      approveAllowances=0-*
      deleteAllowances=0-*
      # File
      createFile=0-*
      updateFile=0-*
      deleteFile=0-*
      appendContent=0-*
      getFileContent=0-*
      getFileInfo=0-*
      # Contract
      createContract=0-*
      updateContract=0-*
      contractCallMethod=0-*
      getContractInfo=0-*
      contractCallLocalMethod=0-*
      contractGetBytecode=0-*
      getTxRecordByContractID=0-*
      deleteContract=0-*
      # Consensus
      createTopic=0-*
      updateTopic=0-*
      deleteTopic=0-*
      submitMessage=0-*
      getTopicInfo=0-*
      # Ethereum
      ethereumTransaction=0-*
      # Scheduling
      scheduleCreate=0-*
      scheduleSign=0-*
      scheduleDelete=0-*
      scheduleGetInfo=0-*
      # Token
      tokenCreate=0-*
      tokenFreezeAccount=0-*
      tokenUnfreezeAccount=0-*
      tokenGrantKycToAccount=0-*
      tokenRevokeKycFromAccount=0-*
      tokenDelete=0-*
      tokenMint=0-*
      tokenBurn=0-*
      tokenAccountWipe=0-*
      tokenUpdate=0-*
      tokenGetInfo=0-*
      tokenGetNftInfo=0-*
      tokenGetNftInfos=0-*
      tokenGetAccountNftInfos=0-*
      tokenAssociateToAccount=0-*
      tokenDissociateFromAccount=0-*
      tokenFeeScheduleUpdate=0-*
      tokenPause=0-*
      tokenUnpause=0-*
      # Network 
      getVersionInfo=0-*
      networkGetExecutionTime=2-50
      systemDelete=2-59
      systemUndelete=2-60
      freeze=2-58
      getAccountDetails=2-50
      # Util
      utilPrng=0-*

    applicationEnv: ""
    applicationProperties: |
      autoRenew.targetTypes=
      hedera.config.version=0

    bootstrapProperties: |
      ledger.id=0x01
      netty.mode=DEV
      contracts.chainId=298
      hedera.recordStream.logPeriod=1
      balances.exportPeriodSecs=400
      files.maxSizeKb=2048
      hedera.recordStream.compressFilesOnCreation=true
      balances.compressOnCreation=true
      contracts.maxNumWithHapiSigsAccess=0

    configTxt: |
      swirld, 298
      app, HederaNode.jar
      address, 0, node0, node0, 1, network-node0-0.network-node0.solo-e2e.svc.cluster.local, 50111, network-node0.solo-e2e.svc.cluster.local, 50111, 0.0.3
      address, 1, node1, node1, 1, network-node1-0.network-node1.solo-e2e.svc.cluster.local, 50111, network-node1.solo-e2e.svc.cluster.local, 50111, 0.0.4
      address, 2, node2, node2, 1, network-node2-0.network-node2.solo-e2e.svc.cluster.local, 50111, network-node2.solo-e2e.svc.cluster.local, 50111, 0.0.5
      nextNodeId, 3

    log4j2Xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!-- monitorInterval="600" , if any change to log level will be effective after 10 minute -->
      <Configuration status="WARN" monitorInterval="600">
        <Appenders>
          <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %-4L %c{1} - %m{nolookups}%n"/>
          </Console>

          <RollingFile name="RollingFile" fileName="output/hgcaa.log"
            filePattern="output/hgcaa-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout>
              <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %-4L %c{1} - %m{nolookups}%n</pattern>
            </PatternLayout>
            <Policies>
              <TimeBasedTriggeringPolicy/>
              <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="10">
              <Delete basePath="output" maxDepth="3">
                <IfFileName glob="hgcaa-*.log.gz">
                  <IfLastModified age="P3D"/>
                </IfFileName>
              </Delete>
            </DefaultRolloverStrategy>
          </RollingFile>

          <RollingFile name="QueriesRollingFile" fileName="output/queries.log"
            filePattern="output/queries-%d{yyyy-MM-dd}-%i.log.gz">
            <BurstFilter level="INFO" rate="50" maxBurst="500"/>
            <PatternLayout>
              <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %-4L %c{1} - %m{nolookups}%n</pattern>
            </PatternLayout>
            <Policies>
              <TimeBasedTriggeringPolicy/>
              <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="10">
              <Delete basePath="output" maxDepth="3">
                <IfFileName glob="queries-*.log.gz">
                  <IfLastModified age="P3D"/>
                </IfFileName>
              </Delete>
            </DefaultRolloverStrategy>
          </RollingFile>

          <RollingFile name="fileLog" fileName="output/swirlds.log"
            filePattern="output/swirlds-sdk-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout>
              <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-8sn %-5p %-16marker &lt;%t&gt; %c{1}: %msg{nolookups}%n</pattern>
            </PatternLayout>
            <Policies>
              <TimeBasedTriggeringPolicy/>
              <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="10">
              <Delete basePath="output" maxDepth="3">
                <IfFileName glob="swirlds-sdk-*.log.gz">
                  <IfLastModified age="P10D"/>
                </IfFileName>
              </Delete>
            </DefaultRolloverStrategy>
          </RollingFile>

          <RollingFile name="vMapLog" fileName="output/swirlds-vmap.log"
            filePattern="output/swirlds-vmap-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout>
              <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-8sn %-5p %-16marker &lt;%t&gt; %c{1}: %msg{nolookups}%n</pattern>
            </PatternLayout>
            <Policies>
              <TimeBasedTriggeringPolicy/>
              <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="10">
              <Delete basePath="output" maxDepth="3">
                <IfFileName glob="swirlds-vmap-*.log.gz">
                  <IfLastModified age="P3D"/>
                </IfFileName>
              </Delete>
            </DefaultRolloverStrategy>
          </RollingFile>

          <!-- Platform hash stream logs -->
          <RollingFile name="swirldsHashStream" fileName="output/swirlds-hashstream/swirlds-hashstream.log"
            filePattern="output/swirlds-hashstream/swirlds-hashstream-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout>
              <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-8sn %-5p %-16marker &lt;%t&gt; %c{1}: %msg{nolookups}%n</pattern>
            </PatternLayout>
            <Policies>
              <TimeBasedTriggeringPolicy/>
              <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="10">
              <Delete basePath="output" maxDepth="3">
                <IfFileName glob="swirlds-hashstream/swirlds-hashstream-*.log.gz">
                  <IfLastModified age="P3D"/>
                </IfFileName>
              </Delete>
            </DefaultRolloverStrategy>
          </RollingFile>

          <!-- Transaction state logs -->
          <RollingFile name="TransactionStateLogs"
                       fileName="output/transaction-state/state-changes.log"
                       filePattern="output/transaction-state/state-changes-%d{yyyy-MM-dd--HH-mm-ss}-%i.log.gz">
            <PatternLayout>
              <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} - %m{nolookups}%n</pattern>
            </PatternLayout>
            <SizeBasedTriggeringPolicy size="50 MB" />
            <DefaultRolloverStrategy max="10"/>
          </RollingFile>

        </Appenders>
        <Loggers>
          <Root level="FATAL">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="fileLog"/>
          </Root>

          <Logger name="com.swirlds" level="INFO" additivity="false">
            <AppenderRef ref="fileLog">
              <Filters>
                <!-- MerkleDb & Virtual Merkle -->
                <MarkerFilter marker="MERKLE_DB"              onMatch="DENY" onMismatch="NEUTRAL"/>
                <MarkerFilter marker="VIRTUAL_MERKLE_STATS"   onMatch="DENY" onMismatch="NEUTRAL"/>
                <MarkerFilter marker="STATE_HASH"             onMatch="DENY" onMismatch="NEUTRAL"/>
              </Filters>
            </AppenderRef>

            <AppenderRef ref="vMapLog">
              <Filters>
                <!-- MerkleDb & Virtual Merkle -->
                <MarkerFilter marker="MERKLE_DB"              onMatch="ACCEPT" onMismatch="NEUTRAL"/>
                <MarkerFilter marker="VIRTUAL_MERKLE_STATS"   onMatch="ACCEPT" onMismatch="NEUTRAL"/>
                <MarkerFilter marker="DISABLED"               onMatch="DENY"   onMismatch="DENY" />
              </Filters>
            </AppenderRef>

            <AppenderRef ref="swirldsHashStream">
              <Filters>
                <!-- Hash stream log -->
                <MarkerFilter marker="STATE_HASH"             onMatch="ACCEPT"  onMismatch="NEUTRAL"/>
                <MarkerFilter marker="DISABLED"               onMatch="DENY"    onMismatch="DENY" />
              </Filters>
            </AppenderRef>

            <!--
      	  Due to known log4j2 issues with how Markers and LogLevels are evaluated there must be a top level <Filter> element
      	  to ensure that the root logger does not execute all the lambda arguments erroneously. Potential work around in the
      	  future is to use a top-level <Filter> and <Logger> specific filters in combination to achieve the desired
      	  multi-logger setup for diagnostic logging.
      	  -->
            <Filters>
              <!-- Filter out levels above INFO (ex: DEBUG & TRACE) -->
              <!-- Intentionally left disabled by default -->
              <!-- <ThresholdFilter level="INFO"                 onMatch="NEUTRAL" onMismatch="DENY" />-->

              <!-- In the following, enable a marker with onMatch="ACCEPT" and disable with onMatch="DENY". -->
              <!-- More markers can be added, but ensure that every onMismatch="NEUTRAL", except the last is "DENY". -->

              <!-- Exceptions -->
              <MarkerFilter marker="EXCEPTION"              onMatch="ACCEPT" onMismatch="NEUTRAL"/>
              <MarkerFilter marker="TESTING_EXCEPTIONS"     onMatch="ACCEPT" onMismatch="NEUTRAL"/>
              <MarkerFilter marker="SOCKET_EXCEPTIONS"      onMatch="ACCEPT" onMismatch="NEUTRAL"/>
              <MarkerFilter marker="TCP_CONNECT_EXCEPTIONS" onMatch="DENY"   onMismatch="NEUTRAL"/>

              <!-- Errors -->
              <MarkerFilter marker="INVALID_EVENT_ERROR"    onMatch="ACCEPT" onMismatch="NEUTRAL"/>

              <!-- Synchronization/Gossip (Debug) -->
              <MarkerFilter marker="SYNC_START"             onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="SYNC_DONE"              onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="SYNC_ERROR"             onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="SYNC"                   onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="HEARTBEAT"              onMatch="DENY"   onMismatch="NEUTRAL"/>

              <!-- Platform Events (Debug) -->
              <MarkerFilter marker="CREATE_EVENT"           onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="INTAKE_EVENT"           onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="WATCH_EVENTS_SEND_REC"  onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="EVENT_SIG"              onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="EVENT_STREAM"           onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="EVENT_RESTART"          onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="STALE_EVENTS"           onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="EVENT_PARSER"           onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="EVENT_CONTENT"          onMatch="DENY"   onMismatch="NEUTRAL"/>

              <!-- Queues/Certificates/Utilities -->
              <MarkerFilter marker="QUEUES"                 onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="CERTIFICATES"           onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="LOCKS"                  onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="TIME_MEASURE"           onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="THREADS"                onMatch="ACCEPT"   onMismatch="NEUTRAL"/>

              <!-- Signed State Signatures -->
              <MarkerFilter marker="STATE_SIG_DIST"         onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="STATE_DELETER"          onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="OBJECT_STREAM_DETAIL"   onMatch="DENY"   onMismatch="NEUTRAL"/>

              <!-- Cryptography -->
              <MarkerFilter marker="OPENCL_INIT_EXCEPTIONS" onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="ADV_CRYPTO_SYSTEM"      onMatch="DENY"   onMismatch="NEUTRAL"/>

              <!-- Startup/Restart/Reconnect -->
              <MarkerFilter marker="STARTUP"                onMatch="ACCEPT" onMismatch="NEUTRAL"/>
              <MarkerFilter marker="PLATFORM_STATUS"        onMatch="ACCEPT" onMismatch="NEUTRAL"/>
              <MarkerFilter marker="RECONNECT"              onMatch="ACCEPT" onMismatch="NEUTRAL"/>
              <MarkerFilter marker="FREEZE"                 onMatch="ACCEPT" onMismatch="NEUTRAL"/>

              <!-- Saved States -->
              <MarkerFilter marker="SNAPSHOT_MANAGER"       onMatch="ACCEPT" onMismatch="NEUTRAL"/>
              <MarkerFilter marker="STATE_TO_DISK"          onMatch="ACCEPT" onMismatch="NEUTRAL"/>
              <MarkerFilter marker="STATE_HASH"             onMatch="ACCEPT" onMismatch="NEUTRAL"/>

              <!-- Beta Mirror -->
              <MarkerFilter marker="BETA_MIRROR_NODE"       onMatch="ACCEPT" onMismatch="NEUTRAL"/>

              <!-- FCMap -->
              <MarkerFilter marker="FCM_COPY"               onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="FCM_COPY_FROM"          onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="FCM_COPY_TO"            onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="FCM_DEMO"               onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="FCM_COPY_FROM_DIFF"     onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="FCM_COPY_TO_DIFF"       onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="FC_SERIALIZATION"       onMatch="DENY"   onMismatch="NEUTRAL"/>

              <!-- Merkle Trees & Hashing -->
              <MarkerFilter marker="MERKLE_FORCE_FLUSH"     onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="MERKLE_HASHING"         onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="MERKLE_GENERATION"      onMatch="DENY"   onMismatch="NEUTRAL"/>
              <MarkerFilter marker="MERKLE_LOCKS"           onMatch="DENY"   onMismatch="NEUTRAL"/>

              <!-- MerkleDb & Virtual Merkle -->
              <MarkerFilter marker="MERKLE_DB"              onMatch="ACCEPT" onMismatch="NEUTRAL"/>
              <MarkerFilter marker="VIRTUAL_MERKLE_STATS"   onMatch="ACCEPT" onMismatch="NEUTRAL"/>

              <MarkerFilter marker="DISABLED"               onMatch="DENY"   onMismatch="DENY" />
            </Filters>
          </Logger>

          <!-- Send transaction state logs to their own appender   -->
          <Logger name="com.hedera.node.app.state.logging.TransactionStateLogger" level="info" additivity="false">
            <AppenderRef ref="TransactionStateLogs"/>
          </Logger>

          <Logger name="com.hedera" level="info" additivity="false">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="com.hedera.services.sigs" level="error" additivity="false">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="com.hedera.services.queries.answering" level="warn" additivity="false">
            <AppenderRef ref="QueriesRollingFile"/>
          </Logger>

          <Logger name="com.hedera.services.legacy" level="warn" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="com.hedera.services.legacy.netty" level="info" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="com.hedera.services.legacy.service" level="warn" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="com.hedera.services.legacy.services" level="warn" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="com.hedera.services.legacy.handler" level="warn" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="com.hedera.services.utils.UnzipUtility" level="info" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="com.hedera.services.legacy.utils" level="warn" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="com.hedera.services.legacy.hgcca.core" level="warn" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="com.hedera.services.legacy.evm" level="warn" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="com.hedera.services.legacy.initialization" level="warn" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
        	<Logger name="com.hedera.services.legacy.config" level="info" additivity="false">
            <AppenderRef ref="RollingFile"/>
            <AppenderRef ref="Console"/>
          </Logger>


          <Logger name="org.springframework" level="ERROR" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="state" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="trie" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="net" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="execute" level="ERROR" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="VM" level="ERROR" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="pending" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="sync" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="wire" level="ERROR" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="db" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="general" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="TCK-Test" level="ERROR" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="org.hibernate" level="ERROR" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="repository" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="blockchain" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="mine" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="blockqueue" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="rlp" level="ERROR" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="java.nio" level="ERROR" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="io.netty" level="ERROR" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="io.grpc" level="ERROR" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="discover" level="WARN" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
          <Logger name="hsqldb.db" level="ERROR" additivity="false">
            <!-- <AppenderRef ref="Console"/> -->
            <AppenderRef ref="RollingFile"/>
          </Logger>
        </Loggers>
      </Configuration>

    settingsTxt: |
      checkSignedStateFromDisk,                      1
      csvFileName,                                   MainNetStats
      csvOutputFolder,                               data/stats
      doUpnp,                                        false
      enableEventStreaming,                          true
      eventsLogDir,                                  /opt/hgcapp/eventsStreams
      eventsLogPeriod,                               5
      maxEventQueueForCons,                          1000
      maxOutgoingSyncs,                              8
      numConnections,                                1000
      reconnect.active,                              1
      reconnect.asyncStreamTimeoutMilliseconds,      60000
      reconnect.reconnectWindowSeconds,              -1
      showInternalStats,                             1
      state.saveStatePeriod,                         900
      state.signedStateDisk,                         5
      throttle7extra,                                0.5
      useLoopbackIp,                                 false
      waitAtStartup,                                 false
      jasperDb.iteratorInputBufferBytes,             16777216
      prometheusEndpointEnabled,                     true
      transactionMaxBytes,                           6144
      loadKeysFromPfxFiles,                          true
      crypto.enableNewKeyStoreModel,                 true

  # Only the name of the node is required. The rest of the configuration will be inherited from `defaults` section
  nodes:
    - name: node0
      accountId: 0.0.3
    - name: node1
      accountId: 0.0.4
    - name: node2
      accountId: 0.0.5
