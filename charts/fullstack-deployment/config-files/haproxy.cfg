# haproxy-2.8.cfg (Adapted from: haproxy-fix-2.8.cfg )
# https://www.haproxy.com/documentation/haproxy-configuration-manual/latest

# identical to 2.0 except with `option-use-htx` removed
global
    log 127.0.0.1 local0 debug
    # Uncomment this log statement for e.g. `docker logs --follow --timestamps --since 10m hedera-proxy`
    # log stdout format raw local0 info
    # TODO: tune maxconn, way too high
    maxconn 100000
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    # TLSv1.3 gives error "SSL handshake failure (error:14209102:SSL routines:tls_early_post_process_client_hello:unsupported protocol)"
    ssl-default-bind-options ssl-min-ver TLSv1.2
    stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners

    # We use a self-signed certificate, so there is no CA to validate with, options are none and required
    ssl-server-verify none

defaults
    log global
    # TODO: tune maxconn, way too high
    maxconn 100000
    timeout connect 10s
    timeout client 30s
    timeout server 30s
    timeout http-keep-alive 30s
    option http-keep-alive

userlist haproxy-dataplaneapi
  user admin insecure-password adminpwd

program api
  command /usr/bin/dataplaneapi --host 0.0.0.0 --port 5555 --haproxy-bin /usr/sbin/haproxy --config-file /usr/local/etc/haproxy/haproxy.cfg --reload-cmd "kill -SIGUSR2 1" --reload-delay 5 --restart-cmd "kill -SIGUSR2 1" --userlist haproxy-dataplaneapi
  no option start-on-reload

frontend http_frontend
    mode http
    option logasap
    option httplog
    # log example:
    #     hedera-proxy | 34.27.47.68:47434 [07/Dec/2023:20:37:07.355] http_frontend http_backend/hedera-services-node 0/0/2/1/3 200 123 - - ---- 3/3/0/0/0 0/0 \
    #     "POST http://35.196.138.70:50211/proto.ConsensusService/submitMessage HTTP/2.0"

    # Read the blocklist of the OFAC Sanctioned Country IP List
    acl ofac_ip src -f /var/opt/ofacBlock.acl
    # Log & reject the request
    tcp-request connection reject if ofac_ip
    acl ofac_ip_xff hdr_ip(x-forwarded-for) -f /var/opt/ofacBlock.acl
    http-request deny if ofac_ip_xff

    bind *:50211 proto h2
    default_backend http_backend

backend http_backend
    mode http
    http-reuse always
    server hedera-services-node network-{{ .nodeConfig.name }}-svc:50211 proto h2 check inter 5s downinter 5s observe layer4 error-limit 5 on-error mark-down minconn 5 maxconn 1000
    # server options: https://www.haproxy.com/documentation/haproxy-configuration-manual/latest/#5.2
        # proto h2                Force HTTP/2 on clear TCP, because it is faster than HTTP/1.1
        # check                   enable health checks on the server, all below options are health check options:
        # inter 5s                 health check interval when server is UP
        # downinter 5s             health check interval when server is DOWN
        # observe layer4            monitor TCP layer for issues, not HTTP (layer7)
        # error-limit 5             number of failed connections before marking server DOWN
        # on-error mark-down        mark server as DOWN upon reaching error-limit above
        # minconn 5                 minimum number of connections to maintain to the backend
        # maxconn 1000              maximum number of connections to maintain to the backend

frontend tls_frontend
    mode http
    option httplog
    # log example (tilde `~` indicates TLS termination):
    #     hedera-proxy    | 206.81.117.129:59102 [07/Dec/2023:20:39:21.662] tls_frontend~ tls_backend/server1 263/8/2829 643 -- 4/1/0/0/0 0/0

    # Read the blocklist of OFAC Sanctioned Country IP List
    acl ofac_ip src -f /var/opt/ofacBlock.acl
    # Log & reject the traffic
    http-request deny if ofac_ip
    # alpn h2                 enable HTTP/2 on the frontend
    # ssl                     enable TLS to terminate TLS connections at HAProxy to protect against H2 Rapid Reset Attack, without this it would passthrough
    # bind *:50212 alpn h2 ssl crt /usr/local/etc/haproxy/hedera.pem
    bind *:50212 alpn h2
    default_backend tls_backend

backend tls_backend
    mode http
    http-reuse always
    # server server1 "${HAPROXY_TARGET_IP}":50212 alpn h2 ssl check inter 10s downinter 10s error-limit 5 on-error mark-down minconn 5 maxconn 1000
    server hedera-services-node network-{{ .nodeConfig.name }}-svc:50212 alpn h2 ssl check inter 5s downinter 5s error-limit 5 on-error mark-down minconn 5 maxconn 1000
    # server options: https://www.haproxy.com/documentation/haproxy-configuration-manual/latest/#5.2
        # alpn h2             prefer HTTP/2
        # ssl                 enable TLS (we set "ssl-server-verify none" in global section above)
        # check               enable health checks on the server, all below options are health check options:
        #                       - "check" is combined with the "ssl" option & results in a "layer6 check" on the /stats page
        #                       - adding a "no-check-ssl" in addition to "check" results in a "layer4 check", which is straight TCP, no TLS
        #                       - adding a "check-ssl" in addition to "check" results in no health checks at all
        #                       - see https://discourse.haproxy.org/t/docs-request-server-ssl-check-layer6-check-passed-but-server-ssl-check-no-check-ssl-layer4-check-passed/9301
        # inter 5s           health check interval
        # downinter 5s       health check interval when server is DOWN
        # error-limit 5       number of failed connections before marking server DOWN
        # on-error mark-down  mark server as DOWN upon reaching error-limit above
        # minconn 5           minimum number of connections to maintain to the backend
        # maxconn 1000        maximum number of connections to maintain to the backend

listen stats
    mode http
    bind 0.0.0.0:9090
    http-request use-service prometheus-exporter if { path /metrics }
    stats enable
    stats uri /stats
    stats refresh 10s
    # TODO: this stats auth changes on helm upgrade: https://github.com/hashgraph/full-stack-testing/issues/794
    stats auth {{ randAlpha 4 | trunc 4 }}:{{ randAlphaNum 10 | trunc 12 }}
