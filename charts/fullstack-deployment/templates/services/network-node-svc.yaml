{{- $defaults := $.Values.defaults.service }}
{{ $headless := list true false }}
{{ range $nodeConfig := ($.Values.hedera.nodes) }}
{{ range $isHeadless := $headless}}
---
apiVersion: v1
kind: Service
metadata:
  name: network-{{ $nodeConfig.name }}{{ if not $isHeadless }}-svc{{ end }}
  namespace: {{ default $.Release.Namespace $.Values.global.namespaceOverride }}
  labels:
    fullstack.hedera.com/type: network-node{{ if $isHeadless }}-headless{{ end }}-svc
    fullstack.hedera.com/node-name: {{ $nodeConfig.name }}
    fullstack.hedera.com/account-id: {{ $nodeConfig.accountId }}
    fullstack.hedera.com/prometheus-endpoint: active
    {{- include "fullstack.testLabels" $ | nindent 4 }}
spec:
  {{- if $isHeadless }}
  clusterIP: None
  {{- else }}
  type: {{ $defaults.serviceType | default "ClusterIP" }}
  externalTrafficPolicy: Local
  {{- end }}
  publishNotReadyAddresses: true
  selector:
    app: network-{{ $nodeConfig.name }}
  ports:
  # GOSSIP port is used by nodes for gossip protocol
  - name: gossip
    protocol: TCP
    port: 50111 # gossip port
    targetPort: 50111
  # GRPC-NON-TLS port is used for services API
  - name: grpc-non-tls
    protocol: TCP
    port: 50211 # non-tls grpc client port
    targetPort: 50211
  # GRPC-TLS port
  - name: grpc-tls
    protocol: TCP
    port: 50212 # tls grpc client port
    targetPort: 50212
  # Node metrics port
  # Rather than exposing the node's metrics port 9999 directly, we expose otel-collect's prometheus port here.
  - name: prometheus # port name must be prometheus for prometheus-svc-monitor
    protocol: TCP
    port: 9090
    targetPort: 9090 # otel-collector's prometheus exporter port
{{- end }}
{{- end }}
