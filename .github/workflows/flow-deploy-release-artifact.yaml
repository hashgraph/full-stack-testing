##
# Copyright (C) 2023 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "Deploy Release Artifact"
on:
  # TODO remove after done testing
  pull_request:
  workflow_dispatch:
    inputs:
      dry-run-enabled:
        description: "Perform Dry Run"
        type: boolean
        required: false
        default: false
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "17.0.3"
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      gradle-version:
        description: "Gradle Version:"
        type: string
        required: false
        default: "wrapper"
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-?*"

defaults:
  run:
    shell: bash

jobs:
  prepare-tag-release:
    name: Release / Tag / Prepare
    runs-on: [self-hosted, Linux, medium, ephemeral]
    outputs:
      version: ${{ steps.tag.outputs.version }}
      prerelease: ${{ steps.tag.outputs.prerelease }}
    steps:
      - name: Install Semantic Version Tools
        run: |
          echo "::group::Download SemVer Binary"
          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          echo "::endgroup::"
          echo "::group::Change SemVer Binary Permissions"
          sudo chmod -v +x /usr/local/bin/semver
          echo "::endgroup::"
          echo "::group::Show SemVer Binary Version Info"
          semver --version
          echo "::endgroup::"

      - name: Extract Tag Version
        id: tag
        run: |
          # TODO remove before merge
          # RELEASE_VERSION="$(semver get release "${{ github.ref_name }}")"
          # PRERELEASE_VERSION="$(semver get prerel "${{ github.ref_name }}")"
          RELEASE_VERSION=0.2.0
          PRERELEASE_VERSION=""

          FINAL_VERSION="${RELEASE_VERSION}"
          PRERELEASE_FLAG="false"
          [[ -n "${PRERELEASE_VERSION}" ]] && FINAL_VERSION="${RELEASE_VERSION}-${PRERELEASE_VERSION}"
          [[ -n "${PRERELEASE_VERSION}" ]] && PRERELEASE_FLAG="true"

          echo "version=${FINAL_VERSION}" >>"${GITHUB_OUTPUT}"
          echo "prerelease=${PRERELEASE_FLAG}" >>"${GITHUB_OUTPUT}"

  release-tag:
    name: Release / Tag
    uses: ./.github/workflows/zxc-release-maven-central.yaml
    needs:
      - prepare-tag-release
    with:
      new-version: ${{ needs.prepare-tag-release.outputs.version || '0.0.1' }}
      dry-run-enabled: ${{ github.event.inputs.dry-run-enabled || false }}
      java-version: ${{ github.event.inputs.java-version || '17.0.3' }}
      java-distribution: ${{ github.event.inputs.java-distribution || 'temurin' }}
      gradle-version: ${{ github.event.inputs.gradle-version || 'wrapper' }}
    secrets:
#      access-token: ${{ secrets.GITHUB_TOKEN }}
      gpg-key-contents: ${{ secrets.GPG_KEY_CONTENTS }}
      gpg-key-passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}
      git-user-name: ${{ secrets.GIT_USER_NAME }}
      git-user-email: ${{ secrets.GIT_USER_EMAIL }}
      ossrh-user-name: ${{ secrets.OSSRH_USER_NAME }}
      ossrh-user-password: ${{ secrets.OSSRH_USER_PASSWORD }}

  # TODO remove after done testing
  release-notes-verification:
    name: Release Notes Verification
    runs-on: [self-hosted, Linux, medium, ephemeral]
    needs: release-tag
    steps:
      - env:
          RELEASE_NOTES1: ${{ needs.release-tag.outputs.release-notes }}
          RELEASE_NOTES2: ${{ needs.release.outputs.release-notes }}
        run: |
          echo "RELEASE_NOTES1=${RELEASE_NOTES1}"
          echo "RELEASE_NOTES2=${RELEASE_NOTES2}"
